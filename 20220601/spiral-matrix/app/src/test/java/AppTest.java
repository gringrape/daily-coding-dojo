/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

// 1. 2x2 정사각형
// 2. 4x4 정사각형 => 패턴찾기
// 3. 추가 풀이 구상
//  - 재귀적 풀이

class AppTest {
    private List<Integer> spiralOrder(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;

        List<Integer> result = new ArrayList<>();

        for (int shellIndex = 0; shellIndex < n / 2 && shellIndex < m / 2; shellIndex++) {
            int yPosition = shellIndex;
            int xPosition = shellIndex;

            while (xPosition < n - 1 - shellIndex) {
                result.add(matrix[yPosition][xPosition]);
                xPosition += 1;
            }

            while (yPosition < m - 1 - shellIndex) {
                result.add(matrix[yPosition][xPosition]);
                yPosition += 1;
            }

            while (xPosition > shellIndex) {
                result.add(matrix[yPosition][xPosition]);
                xPosition -= 1;
            }

            while (yPosition > shellIndex) {
                result.add(matrix[yPosition][xPosition]);
                yPosition -= 1;
            }
        }

        return result;
    }

    @Test
    void shellOne() {
        assertEquals(List.of(1, 2, 4, 3), spiralOrder(new int[][]{
                new int[]{1, 2},
                new int[]{3, 4},
        }));
    }

    @Test
    void shellTwo() {
        assertEquals(List.of(1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10), spiralOrder(new int[][]{
                new int[]{1, 2, 3, 4},
                new int[]{5, 6, 7, 8},
                new int[]{9, 10, 11, 12},
                new int[]{13, 14, 15, 16},
        }));
    }
}
